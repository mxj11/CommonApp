1、JNI：java去调用c模块，java本地开发接口
应用层：
应用层框架：
通过jni使应用层的api可以直接调用c语言写的类库。
自己用c语言做的类库，通过jni来访问c语言类库。
类库：c语言做的，sqlite、webkit、OpenGL、
Linux内核：
2、c的数据基本类型
int：32位，能表示的数字是2的32次方个
最高位用来表示符号位，那么还剩下31位可以表示数值，所以能表示
的数字就是2的31次方个。
int的表示范围：
当最高位是0时，0-2147483647
当最高位是1时，-2147483648-1
java中的基本数据类型长度：
java语言          	     c语言
byte：1				1
short：2			2
int：4				4
long：8				4
boolean：1			1
char：2				1
float：4			4
double：8			8

c语言中表示8位的：long long的数据类型长度就是8位的

c语言输出函数：
%d：int
%ld：long
%c：char
%f：float
%lf：long
%x：十六位进制
%o：八进位制
%u：无符号数
%s：字符数组
c语言输入函数：
int age;
scanf("%d",&age);//&取出age的内存地址

java是无法操作硬件的，要使用c语言来操作硬件，其实就是访问硬件的内存地址，对数据进行读写。
int**:表示指针的地址

c语言中：栈内存是系统自动分配，自动释放；堆内存是手动分配，手动释放；
java语言中，栈内存是系统自动分配，自动释放；堆内存是手动分配，自动释放。

静态内存分配：在栈内存中分配的。
动态内存分配：在堆内存中分配的。

交叉编译：
在一个平台上，编译出另一个平台能够执行的二进制的代码。
平台：windows、mac os、linux
处理器：x86    arm      mips
交叉编译的原理：
源代码-->编译-->链接-->可执行程序
模拟其他平台的特性。
交叉编译的工具链：
多个工具的集合，一个工具使用完后接着调用下一个工具。
常见工具：
NDK：native development kit：本地开发工具集，开发jni必备，就是模拟其他平台特性来编译代码的工具。
CDT：C/C++ development tools：高亮显示c语言关键字（在eclipse中写c）
cygwin：一个模拟器，可以在Windows下运行linux指令。

NDK：目录结构：
doc：帮助文档
build/tools:linux处理文件
platform：编译c代码需要使用的头文件和类库
sample：jni的使用例子
source：NDK的源码
toolchains：工具链

使用jni
1、在项目根目录下创建jni文件目录
2、在jni文件中创建一个c文件
3、在java代码中创建一个本地方法
4、在jni中定义函数实现这个方法，函数名必须为包名+类名+方法名
5、返回一个字符串，用c定义一个字符串
6、把c的字符串转换成java的字符串
7、在jni中创建Android.mk文件
8、在c文件中添加<jni.h>头文件
9、在jni文件夹下执行ndk-build.cmd指令

简单步骤：
1、在项目根目录创建jni文件夹
2、在jni文件夹中创建c文件，在c文件中定义java中要访问的方法
3、在java代码中创建一个本地方法
4、在jni文件夹中创建Android.mk文件
5、在jni文件下执行ndk-build.cmd指令，生成so类库。
6、在java代码中导入so类库，即调用System.loadLibrary（类库名）；

传智播客c/c++视频教学
https://item.taobao.com/item.htm?spm=a230r.1.14.16.TEyobi&id=522935753388&ns=1&abbucket=4#detail


冒号和双冒号的作用：
1、表示机构内位域的定义（即该变量占几个bit空间）
如unsigned char a:4;
2、构造函数后面的冒号起分割作用，是类给成员变量赋值的方法，初始化列表，更适用于成员变量的常量const型。
CAppUpgrade(DWORD pHwnd):CAppBase(pHwnd)
	{
		SetScreenBlackEn(FALSE);
		if( GetDefenseIsAlarming() )
			PostSafeMessage(SMSG_PAUSE_RING, 0, 0, 0);
	}
3、 public:和private:后面的冒号，表示后面定义的所有成员都是公有或私有的，直到下一个"public:”或"private:”出现为止。"private:"为默认处理。
4、类名冒号后面的是用来定义类的继承。
双冒号：
[cpp] view plaincopy
01  class CA {    
02  public:    
03    int ca_var;    
04    int add(int a, int b);    
05    int add(int a);    
06  };   
07      
08  //那么在实现这个函数时，必须这样书写：    
09  int CA::add(int a, int b)    
10  {    
11    return a + b;    
12  }    
13      
14  //另外，双冒号也常常用于在类变量内部作为当前类实例的元素进行表示，比如:    
15  int CA::add(int a)    
16  {    
17    return a + ::ca_var;    
18  }   
19      
20  //表示当前类实例中的变量ca_var。 


析构函数
class CA{
	private:
		int age;
		char name[10];
		char gender;
	public:
		CA(int a,char n,char g){
			age=a;
			name=n;
			gender=g;
	}
		~CA(){//析构函数：构造方法执行完后，会自动调用这个方法，一般用于释放创建对象时所开辟的空间内存，创建多少个对象就会被调用多少次。
		
	}
}


include:头文件包含
include是要告诉编译器，包含一个头文件
在c语言当中，任何函数的调用都需要提前包含头文件

main:c语言中必须包含一个main函数，也只能包含一个main函数

system：库函数的功能就是执行操作系统的命令或者运行其他程序的指令。
对于system库函数必须包含头文件include<stdlib.h>
 system("dir");
 system("pause");
 system("calc");打开计算器

posix：是一种标准，可移植操作系统接口
使代码可以在不同的操作系统下编译。如在Windows和Linux

c语言的编译过程：
预编译，编译，链接，可执行程序
预编译：预编译c文件，生产目标文件：文件名.e
预编译是将include包含的头文件内容替换到.c文件中，并
将注释内容删除掉

类型限定：
const：表示常量
volatile：代表变量是一个可能被cpu指令之外的地方改变的。
volatile int a=1;
编译器不会再去优化代码。


字符串一定是在内存中以0为结尾的一个char数组
在c语言中，实参与形参的数据传递是值传递，即单向传递，只由
实参传递给形参，而不能由形参传递给实参，如果函数的形参是
个数组，那么可以通过形参修改实参的值。
#include <stdio.h>
#include <stdlib.h>

get_Str(char s[]){
     s[0]='a';
     s[1]='b';
     printf("s1=%s\n",s);
     }
getStr1(int n){
          n=n+1;
          printf("n=%d\n",n);
          }


main(){
       int i=19;
       getStr1(i);
       printf("i=%d\n",i);//i的值不会改变，还是19
       
       char s1[100]="hello";
       get_Str(s1);
       printf("s1=%s\n",s1);//s1的值已经修改了为abllo
       system("pause");
       }


















